{"version":3,"sources":["../../src/js/tickerBar.es6.js"],"names":["root","factory","define","amd","module","exports","tickerBar","window","elem","options","xPos","ticking","recycleOnTick","tickerItems","children","pxPerFrame","pxPerSec","parseFloat","autoFill","autoStart","start","prototype","fill","newEls","getItemsTotalLength","getItemLength","getWidestItem","getTickerWidth","i","length","push","cloneNode","appendChild","tick","stop","toggle","parentNode","removeChild","style","transform","requestAnimationFrame","bind","ticker","clientWidth","el","parseInt","getComputedStyle","marginLeft","marginRight","elsArray","itemsLength","widestItem"],"mappings":"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","file":"tickerBar.js","sourcesContent":["'use strict';\r\n\r\n/*\r\n*   Name: tickerBar.js\r\n*   Description: A Javascript plugin for creating newsticker-style, infinitely-scrolling bar.\r\n*   Author: James Catt\r\n*   License: MIT\r\n*   Docs: https://github.com/JamesCatt/tickerBar.js\r\n*   Version: 1.0.0\r\n*/\r\n\r\n(function (root, factory) {\r\n\r\n    if (typeof define === 'function' && define.amd) {\r\n        //AMD\r\n        define([], factory);\r\n    } else if (typeof module !== 'undefined' && module.exports) {\r\n        //Node.js or CommonJS\r\n        module.exports = factory();\r\n    } else {\r\n        // Global\r\n        root.tickerBar = factory();\r\n    }\r\n    \r\n})(window || module || {}, () => {\r\n\r\n    function tickerBar(elem, options) {\r\n        \r\n        this.elem = elem;\r\n        \r\n        // starting position\r\n        this.xPos = 0;\r\n        this.ticking = false;\r\n        this.recycleOnTick = false; // used later for clearing old nodes\r\n\r\n        //\r\n        // set default options\r\n        //\r\n        \r\n        this.options = typeof options !== 'undefined' ? options : {};\r\n\r\n        // tickerItems == all child elements\r\n        this.tickerItems = elem.children;\r\n\r\n        // pxPerFrame == number of pixels per frame to scroll, assumes 60FPS\r\n        this.pxPerFrame = typeof this.options.pxPerSec !== 'undefined' ? parseFloat(this.options.pxPerSec / 60) : 1;\r\n        \r\n        // autoFill == should fill out the ticker by cloning items if necessary\r\n        this.autoFill = typeof this.options.autoFill !== 'undefined' ? this.options.autoFill : true;\r\n\r\n        // autoStart == start the ticker on creation\r\n        this.autoStart = typeof this.options.autoStart !== 'undefined' ? this.options.autoStart : true;\r\n        \r\n        this.autoStart === true && this.start();\r\n        \r\n    }\r\n    \r\n    // Public Methods\r\n\r\n    tickerBar.prototype = {\r\n        \r\n        fill: function () {\r\n\r\n            let newEls = [];\r\n\r\n            if (getItemsTotalLength(this.tickerItems) - getItemLength(getWidestItem(this.tickerItems)) <= getTickerWidth(this.elem)) {\r\n\r\n                for (let i = 0; i < this.tickerItems.length; i++) {\r\n\r\n                    newEls.push(this.tickerItems[i].cloneNode(true));\r\n\r\n                }\r\n            }\r\n\r\n            while (getItemsTotalLength(this.tickerItems) - getItemLength(getWidestItem(this.tickerItems)) <= getTickerWidth(this.elem)) {\r\n\r\n                for (let i = 0; i < newEls.length; i++) {\r\n\r\n                    this.elem.appendChild(newEls[i].cloneNode(true));\r\n\r\n                }\r\n\r\n            }\r\n            \r\n        },\r\n\r\n        start: function () {\r\n            \r\n            if (this.ticking) {\r\n                return; // do nothing if already started\r\n            }\r\n            \r\n            if (this.autoFill) {\r\n                \r\n                this.fill();\r\n                \r\n            }\r\n\r\n            this.ticking = true;\r\n\r\n            this.tick();\r\n            \r\n        },\r\n\r\n        stop: function () {\r\n\r\n            this.ticking = false;\r\n            \r\n        },\r\n        \r\n        toggle: function () {\r\n            \r\n            this.ticking ? this.stop() : this.start();\r\n            \r\n        },\r\n\r\n        tick: function () {\r\n\r\n            if (this.recycleOnTick) {\r\n\r\n                this.xPos -= getItemLength(this.tickerItems[0]);\r\n                this.tickerItems[0].parentNode.removeChild(this.tickerItems[0]);\r\n                this.recycleOnTick = false;\r\n                \r\n            }\r\n\r\n            this.xPos += this.pxPerFrame;\r\n\r\n            for (var i = 0; i < this.tickerItems.length; i++) {\r\n\r\n                this.tickerItems[i].style.transform = 'translateX(-' + this.xPos + 'px)';\r\n                \r\n            }\r\n            \r\n            if (getItemLength(this.tickerItems[0]) < this.xPos) {\r\n            \r\n                this.elem.appendChild(this.tickerItems[0].cloneNode(true));\r\n                this.recycleOnTick = true;\r\n                \r\n            }\r\n\r\n            if (this.ticking) {\r\n\r\n                window.requestAnimationFrame(this.tick.bind(this));\r\n                \r\n            }\r\n        }\r\n\r\n    };\r\n    \r\n    \r\n    // Pure Functions\r\n    \r\n    \r\n\r\n    function getTickerWidth (ticker) {\r\n\r\n        return ticker.clientWidth;\r\n\r\n    }\r\n\r\n    function getItemLength (el) {\r\n\r\n        return parseInt(el.clientWidth) + parseInt(window.getComputedStyle(el).marginLeft) + parseInt(window.getComputedStyle(el).marginRight);\r\n\r\n    }\r\n\r\n    function getItemsTotalLength (elsArray) {\r\n        \r\n        let itemsLength = 0;\r\n\r\n        for (let i = 0; i < elsArray.length; i++) {\r\n\r\n            itemsLength += getItemLength(elsArray[i]);\r\n\r\n        }\r\n\r\n        return itemsLength;\r\n\r\n    }\r\n        \r\n    function getWidestItem (elsArray) {\r\n\r\n        let widestItem = elsArray[0];\r\n\r\n        for (let i = 0; i < elsArray.length; i++) {\r\n\r\n            if (getItemLength(elsArray[i]) > getItemLength(widestItem)) {\r\n\r\n                widestItem = elsArray[i];\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return widestItem;\r\n\r\n    }\r\n\r\n    return tickerBar;\r\n    \r\n});"]}